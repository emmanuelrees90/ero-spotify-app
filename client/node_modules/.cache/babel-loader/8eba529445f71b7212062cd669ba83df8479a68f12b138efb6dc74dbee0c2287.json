{"ast":null,"code":"var _jsxFileName = \"/Users/emmanueloppong/WebstormProjects/spotify-api/client/src/pages/Playlists.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils';\nimport { SectionWrapper, PlaylistsGrid, Loader } from '../components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playlists = () => {\n  _s();\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    };\n    catchErrors(fetchData());\n  }, []);\n\n  // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    }\n\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    };\n\n    // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]);\n\n    // Fetch next set of playlists as needed\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(SectionWrapper, {\n      title: \"Public Playlists\",\n      breadcrumb: true,\n      children: playlists && /*#__PURE__*/_jsxDEV(PlaylistsGrid, {\n        playlists: playlists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(Playlists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n_c = Playlists;\nexport default Playlists;\nvar _c;\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","SectionWrapper","PlaylistsGrid","Loader","jsxDEV","_jsxDEV","Playlists","_s","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","items","children","title","breadcrumb","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmanueloppong/WebstormProjects/spotify-api/client/src/pages/Playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils';\nimport { SectionWrapper, PlaylistsGrid, Loader } from '../components';\n\nconst Playlists = () => {\n    const [playlistsData, setPlaylistsData] = useState(null);\n    const [playlists, setPlaylists] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { data } = await getCurrentUserPlaylists();\n            setPlaylistsData(data);\n        };\n\n        catchErrors(fetchData());\n    }, []);\n\n    // When playlistsData updates, check if there are more playlists to fetch\n    // then update the state variable\n    useEffect(() => {\n        if (!playlistsData) {\n            return;\n        }\n\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\n        // make sure we get ALL playlists by fetching the next set of playlists\n        const fetchMoreData = async () => {\n            if (playlistsData.next) {\n                const { data } = await axios.get(playlistsData.next);\n                setPlaylistsData(data);\n            }\n        };\n\n        // Use functional update to update playlists state variable\n        // to avoid including playlists as a dependency for this hook\n        // and creating an infinite loop\n        setPlaylists(playlists => ([\n            ...playlists ? playlists : [],\n            ...playlistsData.items\n        ]));\n\n        // Fetch next set of playlists as needed\n        catchErrors(fetchMoreData());\n\n    }, [playlistsData]);\n\n    return (\n        <main>\n            <SectionWrapper title=\"Public Playlists\" breadcrumb={true}>\n                {playlists && (\n                    <PlaylistsGrid playlists={playlists} />\n                )}\n            </SectionWrapper>\n        </main>\n    );\n};\n\nexport default Playlists;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,uBAAuB,QAAQ,YAAY;AACpD,SAASC,WAAW,QAAQ,UAAU;AACtC,SAASC,cAAc,EAAEC,aAAa,EAAEC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMd,uBAAuB,CAAC,CAAC;MAChDU,gBAAgB,CAACI,IAAI,CAAC;IAC1B,CAAC;IAEDb,WAAW,CAACY,SAAS,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACAf,SAAS,CAAC,MAAM;IACZ,IAAI,CAACW,aAAa,EAAE;MAChB;IACJ;;IAEA;IACA;IACA,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAIN,aAAa,CAACO,IAAI,EAAE;QACpB,MAAM;UAAEF;QAAK,CAAC,GAAG,MAAMf,KAAK,CAACkB,GAAG,CAACR,aAAa,CAACO,IAAI,CAAC;QACpDN,gBAAgB,CAACI,IAAI,CAAC;MAC1B;IACJ,CAAC;;IAED;IACA;IACA;IACAF,YAAY,CAACD,SAAS,IAAK,CACvB,IAAGA,SAAS,GAAGA,SAAS,GAAG,EAAE,GAC7B,GAAGF,aAAa,CAACS,KAAK,CACxB,CAAC;;IAEH;IACAjB,WAAW,CAACc,aAAa,CAAC,CAAC,CAAC;EAEhC,CAAC,EAAE,CAACN,aAAa,CAAC,CAAC;EAEnB,oBACIH,OAAA;IAAAa,QAAA,eACIb,OAAA,CAACJ,cAAc;MAACkB,KAAK,EAAC,kBAAkB;MAACC,UAAU,EAAE,IAAK;MAAAF,QAAA,EACrDR,SAAS,iBACNL,OAAA,CAACH,aAAa;QAACQ,SAAS,EAAEA;MAAU;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACzC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEf,CAAC;AAACjB,EAAA,CAnDID,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}