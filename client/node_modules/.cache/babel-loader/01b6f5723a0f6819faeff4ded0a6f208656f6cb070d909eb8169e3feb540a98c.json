{"ast":null,"code":"import axios from \"axios\";\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: \"spotify_access_token\",\n  refreshToken: \"spotify_refresh_token\",\n  expireTime: \"spotify_token_expire_time\",\n  timestamp: \"spotify_token_timestamp\"\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n  // Navigate to homepage\n  window.location = window.location.origin;\n};\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === \"undefined\" || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error(\"No refresh token available\");\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n    // Update localStorage values\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, JSON.stringify(Date.now()));\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst getAccessToken = () => {\n  debugger;\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get(\"access_token\"),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get(\"refresh_token\"),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get(\"expires_in\")\n  };\n  const hasError = urlParams.get(\"error\");\n\n  // If there's an error OR the token in localStorage has expired, refresh the token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === \"undefined\") {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localStorage, use that\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== \"undefined\") {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, JSON.stringify(Date.now()));\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  // We should never get here!\n  return false;\n};\nexport const accessToken = getAccessToken();\nconsole.log(`logging access token ${accessToken}`);\n\n/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */\naxios.defaults.baseURL = \"https://api.spotify.com/v1\";\naxios.defaults.headers[\"Authorization\"] = `Bearer ${accessToken}`;\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\n\n/**\n * Get Current User's Profile\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\n * @returns {Promise}\n */\nexport const getCurrentUserProfile = () => {\n  if (accessToken) {\n    return axios.get(\"/me\");\n  }\n};","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","millisecondsElapsed","Date","now","Number","logout","property","removeItem","location","origin","console","error","data","get","setItem","access_token","JSON","stringify","reload","e","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","log","defaults","baseURL","headers","getCurrentUserProfile"],"sources":["/Users/emmanueloppong/WebstormProjects/spotify-api/client/src/spotify.js"],"sourcesContent":["import axios from \"axios\";\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: \"spotify_access_token\",\n  refreshToken: \"spotify_refresh_token\",\n  expireTime: \"spotify_token_expire_time\",\n  timestamp: \"spotify_token_timestamp\",\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */\nconst hasTokenExpired = () => {\n  const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n  // Navigate to homepage\n  window.location = window.location.origin;\n};\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (\n      !LOCALSTORAGE_VALUES.refreshToken ||\n      LOCALSTORAGE_VALUES.refreshToken === \"undefined\" ||\n      Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000\n    ) {\n      console.error(\"No refresh token available\");\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const { data } = await axios.get(\n      `/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`\n    );\n\n    // Update localStorage values\n    window.localStorage.setItem(\n      LOCALSTORAGE_KEYS.accessToken,\n      data.access_token\n    );\n    window.localStorage.setItem(\n      LOCALSTORAGE_KEYS.timestamp,\n      JSON.stringify(Date.now())\n    );\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst getAccessToken = () => {\n  debugger;\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get(\"access_token\"),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get(\"refresh_token\"),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get(\"expires_in\"),\n  };\n  const hasError = urlParams.get(\"error\");\n\n  // If there's an error OR the token in localStorage has expired, refresh the token\n  if (\n    hasError ||\n    hasTokenExpired() ||\n    LOCALSTORAGE_VALUES.accessToken === \"undefined\"\n  ) {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localStorage, use that\n  if (\n    LOCALSTORAGE_VALUES.accessToken &&\n    LOCALSTORAGE_VALUES.accessToken !== \"undefined\"\n  ) {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(\n      LOCALSTORAGE_KEYS.timestamp,\n      JSON.stringify(Date.now())\n    );\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  // We should never get here!\n  return false;\n};\n\nexport const accessToken = getAccessToken();\n\nconsole.log(`logging access token ${accessToken}`);\n\n/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */\naxios.defaults.baseURL = \"https://api.spotify.com/v1\";\naxios.defaults.headers[\"Authorization\"] = `Bearer ${accessToken}`;\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\n\n/**\n * Get Current User's Profile\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\n * @returns {Promise}\n */\nexport const getCurrentUserProfile = () => {\n  if (accessToken) {\n    return axios.get(\"/me\");\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}